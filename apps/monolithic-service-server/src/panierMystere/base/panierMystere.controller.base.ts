/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PanierMystereService } from "../panierMystere.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PanierMystereCreateInput } from "./PanierMystereCreateInput";
import { PanierMystere } from "./PanierMystere";
import { PanierMystereFindManyArgs } from "./PanierMystereFindManyArgs";
import { PanierMystereWhereUniqueInput } from "./PanierMystereWhereUniqueInput";
import { PanierMystereUpdateInput } from "./PanierMystereUpdateInput";
import { VenteFindManyArgs } from "../../vente/base/VenteFindManyArgs";
import { Vente } from "../../vente/base/Vente";
import { VenteWhereUniqueInput } from "../../vente/base/VenteWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PanierMystereControllerBase {
  constructor(
    protected readonly service: PanierMystereService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PanierMystere })
  @nestAccessControl.UseRoles({
    resource: "PanierMystere",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPanierMystere(
    @common.Body() data: PanierMystereCreateInput
  ): Promise<PanierMystere> {
    return await this.service.createPanierMystere({
      data: {
        ...data,

        commerce: data.commerce
          ? {
              connect: data.commerce,
            }
          : undefined,
      },
      select: {
        commerce: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        etat: true,
        id: true,
        nom: true,
        prix: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PanierMystere] })
  @ApiNestedQuery(PanierMystereFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PanierMystere",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async panierMysteres(
    @common.Req() request: Request
  ): Promise<PanierMystere[]> {
    const args = plainToClass(PanierMystereFindManyArgs, request.query);
    return this.service.panierMysteres({
      ...args,
      select: {
        commerce: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        etat: true,
        id: true,
        nom: true,
        prix: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PanierMystere })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PanierMystere",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async panierMystere(
    @common.Param() params: PanierMystereWhereUniqueInput
  ): Promise<PanierMystere | null> {
    const result = await this.service.panierMystere({
      where: params,
      select: {
        commerce: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        etat: true,
        id: true,
        nom: true,
        prix: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PanierMystere })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PanierMystere",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePanierMystere(
    @common.Param() params: PanierMystereWhereUniqueInput,
    @common.Body() data: PanierMystereUpdateInput
  ): Promise<PanierMystere | null> {
    try {
      return await this.service.updatePanierMystere({
        where: params,
        data: {
          ...data,

          commerce: data.commerce
            ? {
                connect: data.commerce,
              }
            : undefined,
        },
        select: {
          commerce: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          etat: true,
          id: true,
          nom: true,
          prix: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PanierMystere })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PanierMystere",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePanierMystere(
    @common.Param() params: PanierMystereWhereUniqueInput
  ): Promise<PanierMystere | null> {
    try {
      return await this.service.deletePanierMystere({
        where: params,
        select: {
          commerce: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          etat: true,
          id: true,
          nom: true,
          prix: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/ventes")
  @ApiNestedQuery(VenteFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "read",
    possession: "any",
  })
  async findVentes(
    @common.Req() request: Request,
    @common.Param() params: PanierMystereWhereUniqueInput
  ): Promise<Vente[]> {
    const query = plainToClass(VenteFindManyArgs, request.query);
    const results = await this.service.findVentes(params.id, {
      ...query,
      select: {
        clientAdresse: true,
        clientNom: true,
        createdAt: true,
        date: true,
        id: true,

        panierMystere: {
          select: {
            id: true,
          },
        },

        quantite: true,
        total: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ventes")
  @nestAccessControl.UseRoles({
    resource: "PanierMystere",
    action: "update",
    possession: "any",
  })
  async connectVentes(
    @common.Param() params: PanierMystereWhereUniqueInput,
    @common.Body() body: VenteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ventes: {
        connect: body,
      },
    };
    await this.service.updatePanierMystere({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ventes")
  @nestAccessControl.UseRoles({
    resource: "PanierMystere",
    action: "update",
    possession: "any",
  })
  async updateVentes(
    @common.Param() params: PanierMystereWhereUniqueInput,
    @common.Body() body: VenteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ventes: {
        set: body,
      },
    };
    await this.service.updatePanierMystere({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ventes")
  @nestAccessControl.UseRoles({
    resource: "PanierMystere",
    action: "update",
    possession: "any",
  })
  async disconnectVentes(
    @common.Param() params: PanierMystereWhereUniqueInput,
    @common.Body() body: VenteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ventes: {
        disconnect: body,
      },
    };
    await this.service.updatePanierMystere({
      where: params,
      data,
      select: { id: true },
    });
  }
}
