/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Commerce as PrismaCommerce,
  Feedback as PrismaFeedback,
  PanierMystere as PrismaPanierMystere,
  Utilisateur as PrismaUtilisateur,
} from "@prisma/client";

export class CommerceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CommerceCountArgs, "select">): Promise<number> {
    return this.prisma.commerce.count(args);
  }

  async commerceItems<T extends Prisma.CommerceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommerceFindManyArgs>
  ): Promise<PrismaCommerce[]> {
    return this.prisma.commerce.findMany<Prisma.CommerceFindManyArgs>(args);
  }
  async commerce<T extends Prisma.CommerceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommerceFindUniqueArgs>
  ): Promise<PrismaCommerce | null> {
    return this.prisma.commerce.findUnique(args);
  }
  async createCommerce<T extends Prisma.CommerceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommerceCreateArgs>
  ): Promise<PrismaCommerce> {
    return this.prisma.commerce.create<T>(args);
  }
  async updateCommerce<T extends Prisma.CommerceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommerceUpdateArgs>
  ): Promise<PrismaCommerce> {
    return this.prisma.commerce.update<T>(args);
  }
  async deleteCommerce<T extends Prisma.CommerceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommerceDeleteArgs>
  ): Promise<PrismaCommerce> {
    return this.prisma.commerce.delete(args);
  }

  async findFeedbacks(
    parentId: string,
    args: Prisma.FeedbackFindManyArgs
  ): Promise<PrismaFeedback[]> {
    return this.prisma.commerce
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .feedbacks(args);
  }

  async findPanierMysteres(
    parentId: string,
    args: Prisma.PanierMystereFindManyArgs
  ): Promise<PrismaPanierMystere[]> {
    return this.prisma.commerce
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .panierMysteres(args);
  }

  async getUtilisateur(parentId: string): Promise<PrismaUtilisateur | null> {
    return this.prisma.commerce
      .findUnique({
        where: { id: parentId },
      })
      .utilisateur();
  }
  async GetCommerceDetails(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async GetCommerces(args: string): Promise<string[]> {
    throw new Error("Not implemented");
  }
  async UpdateCommerceInfo(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
