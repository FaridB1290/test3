/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Commerce } from "./Commerce";
import { CommerceCountArgs } from "./CommerceCountArgs";
import { CommerceFindManyArgs } from "./CommerceFindManyArgs";
import { CommerceFindUniqueArgs } from "./CommerceFindUniqueArgs";
import { CreateCommerceArgs } from "./CreateCommerceArgs";
import { UpdateCommerceArgs } from "./UpdateCommerceArgs";
import { DeleteCommerceArgs } from "./DeleteCommerceArgs";
import { FeedbackFindManyArgs } from "../../feedback/base/FeedbackFindManyArgs";
import { Feedback } from "../../feedback/base/Feedback";
import { PanierMystereFindManyArgs } from "../../panierMystere/base/PanierMystereFindManyArgs";
import { PanierMystere } from "../../panierMystere/base/PanierMystere";
import { Utilisateur } from "../../utilisateur/base/Utilisateur";
import { CommerceUpdateInput } from "./CommerceUpdateInput";
import { CommerceService } from "../commerce.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Commerce)
export class CommerceResolverBase {
  constructor(
    protected readonly service: CommerceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Commerce",
    action: "read",
    possession: "any",
  })
  async _commerceItemsMeta(
    @graphql.Args() args: CommerceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Commerce])
  @nestAccessControl.UseRoles({
    resource: "Commerce",
    action: "read",
    possession: "any",
  })
  async commerceItems(
    @graphql.Args() args: CommerceFindManyArgs
  ): Promise<Commerce[]> {
    return this.service.commerceItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Commerce, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Commerce",
    action: "read",
    possession: "own",
  })
  async commerce(
    @graphql.Args() args: CommerceFindUniqueArgs
  ): Promise<Commerce | null> {
    const result = await this.service.commerce(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Commerce)
  @nestAccessControl.UseRoles({
    resource: "Commerce",
    action: "create",
    possession: "any",
  })
  async createCommerce(
    @graphql.Args() args: CreateCommerceArgs
  ): Promise<Commerce> {
    return await this.service.createCommerce({
      ...args,
      data: {
        ...args.data,

        utilisateur: args.data.utilisateur
          ? {
              connect: args.data.utilisateur,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Commerce)
  @nestAccessControl.UseRoles({
    resource: "Commerce",
    action: "update",
    possession: "any",
  })
  async updateCommerce(
    @graphql.Args() args: UpdateCommerceArgs
  ): Promise<Commerce | null> {
    try {
      return await this.service.updateCommerce({
        ...args,
        data: {
          ...args.data,

          utilisateur: args.data.utilisateur
            ? {
                connect: args.data.utilisateur,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Commerce)
  @nestAccessControl.UseRoles({
    resource: "Commerce",
    action: "delete",
    possession: "any",
  })
  async deleteCommerce(
    @graphql.Args() args: DeleteCommerceArgs
  ): Promise<Commerce | null> {
    try {
      return await this.service.deleteCommerce(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Feedback], { name: "feedbacks" })
  @nestAccessControl.UseRoles({
    resource: "Feedback",
    action: "read",
    possession: "any",
  })
  async findFeedbacks(
    @graphql.Parent() parent: Commerce,
    @graphql.Args() args: FeedbackFindManyArgs
  ): Promise<Feedback[]> {
    const results = await this.service.findFeedbacks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PanierMystere], { name: "panierMysteres" })
  @nestAccessControl.UseRoles({
    resource: "PanierMystere",
    action: "read",
    possession: "any",
  })
  async findPanierMysteres(
    @graphql.Parent() parent: Commerce,
    @graphql.Args() args: PanierMystereFindManyArgs
  ): Promise<PanierMystere[]> {
    const results = await this.service.findPanierMysteres(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Utilisateur, {
    nullable: true,
    name: "utilisateur",
  })
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "read",
    possession: "any",
  })
  async getUtilisateur(
    @graphql.Parent() parent: Commerce
  ): Promise<Utilisateur | null> {
    const result = await this.service.getUtilisateur(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => String)
  async GetCommerceDetails(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetCommerceDetails(args);
  }

  @graphql.Query(() => [String])
  async GetCommerces(
    @graphql.Args()
    args: string
  ): Promise<string[]> {
    return this.service.GetCommerces(args);
  }

  @graphql.Query(() => String)
  async UpdateCommerceDetails(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.UpdateCommerceDetails(args);
  }

  @graphql.Mutation(() => String)
  async UpdateCommerceInfo(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.UpdateCommerceInfo(args);
  }

  @graphql.Mutation(() => Commerce)
  async UpdateCommerceInformationCorrected(
    @graphql.Args()
    args: CommerceUpdateInput
  ): Promise<Commerce> {
    return this.service.UpdateCommerceInformationCorrected(args);
  }

  @graphql.Mutation(() => Commerce)
  async UpdateCommerceInformationDetail(
    @graphql.Args()
    args: CommerceUpdateInput
  ): Promise<Commerce> {
    return this.service.UpdateCommerceInformationDetail(args);
  }
}
