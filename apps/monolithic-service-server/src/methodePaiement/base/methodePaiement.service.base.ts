/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MethodePaiement as PrismaMethodePaiement,
} from "@prisma/client";

export class MethodePaiementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MethodePaiementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.methodePaiement.count(args);
  }

  async methodePaiements<T extends Prisma.MethodePaiementFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MethodePaiementFindManyArgs>
  ): Promise<PrismaMethodePaiement[]> {
    return this.prisma.methodePaiement.findMany<Prisma.MethodePaiementFindManyArgs>(
      args
    );
  }
  async methodePaiement<T extends Prisma.MethodePaiementFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MethodePaiementFindUniqueArgs>
  ): Promise<PrismaMethodePaiement | null> {
    return this.prisma.methodePaiement.findUnique(args);
  }
  async createMethodePaiement<T extends Prisma.MethodePaiementCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MethodePaiementCreateArgs>
  ): Promise<PrismaMethodePaiement> {
    return this.prisma.methodePaiement.create<T>(args);
  }
  async updateMethodePaiement<T extends Prisma.MethodePaiementUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MethodePaiementUpdateArgs>
  ): Promise<PrismaMethodePaiement> {
    return this.prisma.methodePaiement.update<T>(args);
  }
  async deleteMethodePaiement<T extends Prisma.MethodePaiementDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MethodePaiementDeleteArgs>
  ): Promise<PrismaMethodePaiement> {
    return this.prisma.methodePaiement.delete(args);
  }
}
